{"version":3,"sources":["utilities/constants.js","components/cards/CardDetailStageRow.js","components/cards/CardDetail.js","components/cards/CardTable.js","App.js","serviceWorker.js","index.js"],"names":["ATTRIBUTES","CardDetailStageRow","data","console","log","TableRow","TableCell","component","scope","code","rarity","level","align","hp","attack","defense","skill_1","name","desc","cooldown","skill_2","useStyles","makeStyles","table","minWidth","CardDetail","classes","TableContainer","Paper","Table","className","size","TableHead","TableBody","stages","map","stage","key","gearNameSet","Set","tableData","Object","entries","GearData","value","new_value","id","add","char_name","firstStage","lastStage","length","max_hp","max_attack","max_defense","max_total","rarity_str","columns","title","field","type","lookup","reduce","obj","val","filtering","CardTable","options","padding","pageSize","pageSizeOptions","search","detailPanel","rowData","onRowClick","event","togglePanel","App","CssBaseline","Container","maxWidth","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.feb96248.chunk.js","sourcesContent":["export const ATTRIBUTES = [\r\n  \"Power\",\r\n  \"Dexterity\",\r\n  \"Intelligence\",\r\n  \"Body\",\r\n  \"Heart\",\r\n  \"Technique\",\r\n  \"Rage\"\r\n];\r\n","import React from \"react\";\r\nimport { TableRow, TableCell } from \"@material-ui/core\";\r\n\r\nconst CardDetailStageRow = ({ data }) => {\r\n  console.log(data);\r\n\r\n  return (\r\n    <TableRow>\r\n      <TableCell component=\"th\" scope=\"row\">\r\n        {data.code}\r\n      </TableCell>\r\n      <TableCell>{data.rarity}☆</TableCell>\r\n      <TableCell>{data.level}</TableCell>\r\n      <TableCell align=\"right\">{data.hp}</TableCell>\r\n      <TableCell align=\"right\">{data.attack}</TableCell>\r\n      <TableCell align=\"right\">{data.defense}</TableCell>\r\n      <TableCell>\r\n        <b>{data.skill_1.name}</b>: {data.skill_1.desc}{\" \"}\r\n        <i>[{data.skill_1.cooldown}s]</i>\r\n      </TableCell>\r\n      <TableCell>\r\n        <b>{data.skill_2.name}</b>: {data.skill_2.desc}{\" \"}\r\n        <i>[{data.skill_2.cooldown}s]</i>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n\r\nexport default CardDetailStageRow;\r\n","import React from \"react\";\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Paper,\r\n  makeStyles\r\n} from \"@material-ui/core\";\r\nimport CardDetailStageRow from \"./CardDetailStageRow\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650\r\n  }\r\n});\r\n\r\nconst CardDetail = ({ data }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Stage</TableCell>\r\n            <TableCell>Rarity</TableCell>\r\n            <TableCell>Level</TableCell>\r\n            <TableCell>HP</TableCell>\r\n            <TableCell>Attack</TableCell>\r\n            <TableCell>Defense</TableCell>\r\n            <TableCell>Skill #1</TableCell>\r\n            <TableCell>Skill #2</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.stages.map(stage => (\r\n            <CardDetailStageRow key={stage.code} data={stage} />\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default CardDetail;\r\n","import React from \"react\";\r\nimport GearData from \"../../data/gear_data.json\";\r\nimport MaterialTable from \"material-table\";\r\nimport { ATTRIBUTES } from \"../../utilities/constants.js\";\r\nimport CardDetail from \"./CardDetail.js\";\r\n\r\nconst gearNameSet = new Set();\r\n\r\nconst tableData = Object.entries(GearData).map(([key, value]) => {\r\n  const new_value = {\r\n    id: key,\r\n    ...value\r\n  };\r\n\r\n  gearNameSet.add(value.char_name);\r\n\r\n  const firstStage = value.stages[0];\r\n  const lastStage = value.stages[value.stages.length - 1];\r\n\r\n  new_value[\"helpers\"] = {\r\n    max_hp: lastStage.hp,\r\n    max_attack: lastStage.attack,\r\n    max_defense: lastStage.defense,\r\n    max_total: lastStage.hp + lastStage.attack + lastStage.defense,\r\n    rarity_str: firstStage.rarity + \"☆\"\r\n  };\r\n\r\n  return new_value;\r\n});\r\n\r\nconst getCharLookups = () => {\r\n  return [...gearNameSet].reduce((obj, val) => ({ ...obj, [val]: val }), {});\r\n};\r\n\r\nconst getAttributeLookups = () => {\r\n  return ATTRIBUTES.reduce((obj, val) => ({ ...obj, [val]: val }), {});\r\n};\r\n\r\nconst columns = [\r\n  { title: \"ID\", field: \"id\", type: \"numeric\" },\r\n  {\r\n    title: \"Character\",\r\n    field: \"char_name\",\r\n    lookup: getCharLookups()\r\n  },\r\n  { title: \"Skill Name\", field: \"skill_name\" },\r\n  {\r\n    title: \"Rarity\",\r\n    field: \"helpers.rarity_str\",\r\n    lookup: { \"3☆\": \"3☆\", \"4☆\": \"4☆\", \"5☆\": \"5☆\" }\r\n  },\r\n  { title: \"Attribute\", field: \"attribute\", lookup: getAttributeLookups() },\r\n  {\r\n    title: \"Max. HP\",\r\n    field: \"helpers.max_hp\",\r\n    filtering: false,\r\n    type: \"numeric\"\r\n  },\r\n  {\r\n    title: \"Max. Attack\",\r\n    field: \"helpers.max_attack\",\r\n    filtering: false,\r\n    type: \"numeric\"\r\n  },\r\n  {\r\n    title: \"Max. Defense\",\r\n    field: \"helpers.max_defense\",\r\n    filtering: false,\r\n    type: \"numeric\"\r\n  },\r\n  {\r\n    title: \"Max. Stat Total\",\r\n    field: \"helpers.max_total\",\r\n    type: \"numeric\",\r\n    filtering: false\r\n  }\r\n];\r\n\r\nconst CardTable = () => {\r\n  return (\r\n    <MaterialTable\r\n      columns={columns}\r\n      data={tableData}\r\n      title=\"XDU Global Playable Units\"\r\n      options={{\r\n        padding: \"dense\",\r\n        pageSize: 25,\r\n        pageSizeOptions: [25, 50, 100, 250, 500],\r\n        search: false,\r\n        filtering: true\r\n      }}\r\n      detailPanel={rowData => <CardDetail data={rowData} />}\r\n      onRowClick={(event, rowData, togglePanel) => togglePanel()}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CardTable;\r\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Container from \"@material-ui/core/Container\";\nimport CardTable from \"./components/cards/CardTable\";\nimport { CssBaseline } from \"@material-ui/core\";\n\nconst App = () => {\n  return (\n    <>\n      <CssBaseline />\n      <Container maxWidth=\"lg\">\n        <main>\n          <Switch>\n            <Route path=\"/\">\n              <CardTable />\n            </Route>\n          </Switch>\n        </main>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}